import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.exceptions import TelegramAPIError
from aiogram.enums import ChatMemberStatus
from data.check_on_login_52_42 import Checking_login_im_inspect_you_shell_not_pass
from data import db_recepts_session
from data import users_table_recepts
from data import recept_table
from random import randint
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

db_recepts_session.global_init("db/blogs.db")
authorized = Checking_login_im_inspect_you_shell_not_pass()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

dp = Dispatcher()
BOT_TOKEN = '7966628296:AAG_6x5E_srubv-WwCfsQRoFAVq5OSEUgio'
site = '–†–µ—Ü–µ–ø—Ç—ã –∏ —Ç–æ—á–∫–∞'
channel = '@Recipes_And_Point'
bot = Bot(token=BOT_TOKEN)


class Form(StatesGroup):
    waiting_for_account_confirmation = State()
    waiting_for_login = State()
    waiting_for_password = State()
    waiting_for_email = State()


async def check_subscription(user_id: int):
    try:
        chat_member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        return chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except TelegramAPIError:
        return False


def get_subscription_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{channel[1:]}")],
        [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ", callback_data="check_subscription")]
    ])
    return keyboard


@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    if await check_subscription(callback.from_user.id):
        await callback.message.delete()
        await process_menu_command(callback.message)
    else:
        await callback.answer("–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)


@dp.message(Command('menu'))
async def process_menu_command(message: types.Message):
    kbm = [
        [KeyboardButton(text='–ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –∫—É–ª–∏–Ω–∞—Ä–∏–∏')]
    ]
    kbmenu = ReplyKeyboardMarkup(keyboard=kbm, resize_keyboard=True, one_time_keyboard=False)
    await message.answer('–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –º–æ–ª–æ–¥–µ—Ü! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º', reply_markup=kbmenu)


@dp.message(Command('start'))
async def process_start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await check_subscription(user_id):
        await message.answer(
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=get_subscription_keyboard()
        )
        return

    reply_keyboard = [[KeyboardButton(text='–î–∞'), KeyboardButton(text='–ù–µ—Ç')]]
    kblogreg = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await message.answer('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫–∫–∞—É–Ω—Ç?', reply_markup=kblogreg)
    await state.set_state(Form.waiting_for_account_confirmation)


@dp.message(Form.waiting_for_account_confirmation)
async def process_account_confirmation(message: types.Message, state: FSMContext):
    reply_keyboard = [[KeyboardButton(text='–î–∞'), KeyboardButton(text='–ù–µ—Ç')]]
    kblogreg = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await state.update_data(account_confirmation=message.text)
    if message.text == '–î–∞':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Form.waiting_for_login)
    elif message.text == '–ù–µ—Ç':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Form.waiting_for_login)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç', reply_markup=kblogreg)


@dp.message(Form.waiting_for_login)
async def process_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    await state.set_state(Form.waiting_for_password)


@dp.message(Form.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if user_data.get('account_confirmation') == '–ù–µ—Ç':
        await state.update_data(password=message.text)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ email:')
        await state.set_state(Form.waiting_for_email)
    else:
        db_user_name = user_data['login']
        db_user_password = message.text

        try:
            user = db_recepts_session.create_session().query(users_table_recepts.User).filter(
                users_table_recepts.User.name == db_user_name).first()
            if not user:
                await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            elif not user.check_password(db_user_password):
                await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
            else:
                authorized.logined(user.id)
                await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
                await process_menu_command(message)

        except Exception:
            await message.answer('–û—à–∏–±–∫–∞')
        await state.clear()


@dp.message(Form.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user = users_table_recepts.User()
    user.name = user_data['login']
    user.email = message.text
    user.set_password(user_data['password'])

    db_sess = db_recepts_session.create_session()
    db_sess.add(user)
    db_sess.commit()

    authorized.logined(user.id)

    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
    await process_menu_command(message)
    await state.clear()


async def start_bot(message: types.Message):
    if message.from_user.username:
        user_name = message.from_user.username
    elif message.from_user.first_name:
        user_name = message.from_user.first_name
    else:
        user_name = "–¥—Ä—É–≥"

    reply_keyboard = [
        [KeyboardButton(text='–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã'), KeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç')]
    ]
    kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É–¥–æ–±–Ω—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ —Å–∞–π—Ç—É {site}, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –µ–¥—ã –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —á—É–∂–∏–µ.",
        reply_markup=kb)


'''@dp.message(Command('publish'))
async def process_publish_command(message: types.Message):
    try:
        if authorized.check():
            count = len(db_recepts_session.create_session().query(recept_table.Recepts.id).all()) + 1
            # —Å–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –∏ —Ñ–æ—Ç–æ, –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–≥–∞–º–∏ –≤–∏–¥–∞ –±–ª—é–¥–∞
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: —Ñ–æ—Ç–æ
            recept = recept_table.Recepts()
            reply_keyboard_tags = [
                [KeyboardButton(text='–°—É–ø'), KeyboardButton(text='–î–µ—Å–µ—Ä—Ç')],
                [KeyboardButton(text='–ù–∞–ø–∏—Ç–∫–∏'), KeyboardButton(text='–ì–∞—Ä–Ω–∏—Ä')]
            ]
            kbtags = ReplyKeyboardMarkup(keyboard=reply_keyboard_tags, resize_keyboard=True, one_time_keyboard=False)
            await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:')
            recept.title = message.text
            await message.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:')
            recept.discription = message.text
            await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–µ—Ü–µ–ø—Ç–∞:')
            image = message.text
            recept.way_to_image = f"/static/img/hero_file{count}.png"
            await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞:', reply_markup=kbtags)
            if message.text != '–°—É–ø' or message.text != '–î–µ—Å–µ—Ä—Ç' or message.text != '–ù–∞–ø–∏—Ç–∫–∏' or message.text != '–ì–∞—Ä–Ω–∏—Ä':
                await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:', reply_markup=kbtags)
            else:
                recept.category_tags = message.text
            await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:')
            text = message.text
            recept.user_id = authorized.get_id()
            with open(f'static/text_files/text_recept_{count}', mode='w') as f:
                f.write('\n'.join(text.split('\r\n')))
                recept.content = f'static/text_files/text_recept_{count}'
                db_sess = db_recepts_session.create_session()
                db_sess.add(recept)
                db_sess.commit()

            await message.reply("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")
    except Exception as f:
        print(f)'''


@dp.message(Command('recipes'))
async def process_recipes_command(message: types.Message):
    if len(db_recepts_session.create_session().query(recept_table.Recepts.id).all()) != 0:
        x = randint(1, len(db_recepts_session.create_session().query(recept_table.Recepts.id).all()))
        ans = db_recepts_session.create_session().query(recept_table.Recepts).filter(
            recept_table.Recepts.id == x).first()
        with open(f"{ans.content}", mode='r') as f:
            b = f.readlines()
            ans.content = ''.join(b)
        title = ans.title
        discription = ans.discription
        image = FSInputFile(ans.way_to_image)
        category_tags = ans.category_tags
        content = ans.content
        reply_keyboard_next = [
            [KeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç')]
        ]
        kbnext = ReplyKeyboardMarkup(keyboard=reply_keyboard_next, resize_keyboard=True, one_time_keyboard=False)
        await message.answer_photo(
            photo=image,
            caption=f"{title}\n\n"
                    f"{discription}\n\n"
                    f"{category_tags}\n\n"
                    f"{content}",
            reply_markup=kbnext
        )
    else:
        await message.reply("–†–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–≤—ã–º!")


@dp.message()
async def other_message(message: types.Message):
    '''if message.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç':
        asyncio.create_task(process_publish_command(message))'''
    if message.text == '–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã':
        asyncio.create_task(process_recipes_command(message))
    elif message.text == '–°–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç':
        asyncio.create_task(process_recipes_command(message))
    elif message.text == '–ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –∫—É–ª–∏–Ω–∞—Ä–∏–∏':
        asyncio.create_task(start_bot(message))
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–±–æ—Ç–∞–π —Å –±–æ—Ç–æ–º —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º')


reply_keyboard = [
    [KeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'), KeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç')],
    [KeyboardButton(text='–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã'), KeyboardButton(text='–†–µ–π—Ç–∏–Ω–≥')]
]
kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
