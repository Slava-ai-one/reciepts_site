import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
import sqlite3
from aiogram.enums import ChatMemberStatus

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

dp = Dispatcher()
BOT_TOKEN = '7966628296:AAG_6x5E_srubv-WwCfsQRoFAVq5OSEUgio'
site = '–†–µ—Ü–µ–ø—Ç—ã –∏ —Ç–æ—á–∫–∞'
channel = '@Recipes_And_Point'
bot = Bot(token=BOT_TOKEN)

conn = sqlite3.connect('botik.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
               (user_id INTEGER PRIMARY KEY, 
                username TEXT)''')
conn.commit()


async def check_subscription(user_id: int):
    try:
        chat_member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        return chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except TelegramAPIError:
        return False


def get_subscription_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{channel[1:]}")],
        [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ", callback_data="check_subscription")]
    ])
    return keyboard


@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    if await check_subscription(callback.from_user.id):
        await callback.message.delete()
        await process_menu_command(callback.message)
    else:
        await callback.answer("–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)


@dp.message(Command('menu'))
async def process_menu_command(message: types.Message):
    kbm = [
        [KeyboardButton(text='–ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –∫—É–ª–∏–Ω–∞—Ä–∏–∏')]
    ]
    kbmenu = ReplyKeyboardMarkup(keyboard=kbm, resize_keyboard=True, one_time_keyboard=False)
    await message.answer('–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –º–æ–ª–æ–¥–µ—Ü! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º', reply_markup=kbmenu)


@dp.message(Command('start'))
async def process_start_command(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute(
            "INSERT INTO users (user_id, username) VALUES (?, ?)",
            (user_id, message.from_user.username)
        )
        conn.commit()

    if not await check_subscription(user_id):
        await message.answer(
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=get_subscription_keyboard()
        )
        return

    await process_menu_command(message)


async def start_bot(message: types.Message):
    if message.from_user.username:
        user_name = message.from_user.username
    elif message.from_user.first_name:
        user_name = message.from_user.first_name
    else:
        user_name = "–î—Ä—É–≥"

    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É–¥–æ–±–Ω—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ —Å–∞–π—Ç—É {site}, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –µ–¥—ã –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —á—É–∂–∏–µ.",
        reply_markup=kb)


@dp.message(Command('profile'))
async def process_profile_command(message: types.Message):
    await message.reply("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@dp.message(Command('publish'))
async def process_publish_command(message: types.Message):
    await message.reply("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")


@dp.message(Command('recipes'))
async def process_recipes_command(message: types.Message):
    await message.reply("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–Ω—Ç—É —Ä–µ—Ü–µ–ø—Ç–æ–≤")


@dp.message(Command('rating'))
async def process_rating_command(message: types.Message):
    await message.reply("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 3 –ª—É—á—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@dp.message()
async def other_message(message: types.Message):
    if message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        asyncio.create_task(process_profile_command(message))
    elif message.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç':
        asyncio.create_task(process_publish_command(message))
    elif message.text == '–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã':
        asyncio.create_task(process_recipes_command(message))
    elif message.text == '–†–µ–π—Ç–∏–Ω–≥':
        asyncio.create_task(process_rating_command(message))
    elif message.text == '–ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –∫—É–ª–∏–Ω–∞—Ä–∏–∏':
        asyncio.create_task(start_bot(message))
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–±–æ—Ç–∞–π —Å –±–æ—Ç–æ–º —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º')


reply_keyboard = [
    [KeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'), KeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç')],
    [KeyboardButton(text='–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã'), KeyboardButton(text='–†–µ–π—Ç–∏–Ω–≥')]
]
kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
