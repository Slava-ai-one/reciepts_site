import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
import sqlite3
from aiogram.enums import ChatMemberStatus
from data.check_on_login_52_42 import Checking_login_im_inspect_you_shell_not_pass
from data import db_recepts_session
from data import users_table_recepts
from data import recept_table
from random import randint

db_recepts_session.global_init("db/blogs.db")
authorized = Checking_login_im_inspect_you_shell_not_pass()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

dp = Dispatcher()
BOT_TOKEN = '7966628296:AAG_6x5E_srubv-WwCfsQRoFAVq5OSEUgio'
site = '–†–µ—Ü–µ–ø—Ç—ã –∏ —Ç–æ—á–∫–∞'
channel = '@Recipes_And_Point'
bot = Bot(token=BOT_TOKEN)


async def check_subscription(user_id: int):
    try:
        chat_member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        return chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except TelegramAPIError:
        return False


def get_subscription_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{channel[1:]}")],
        [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ", callback_data="check_subscription")]
    ])
    return keyboard


@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    if await check_subscription(callback.from_user.id):
        await callback.message.delete()
        await process_menu_command(callback.message)
    else:
        await callback.answer("–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)


@dp.message(Command('menu'))
async def process_menu_command(message: types.Message):
    kbm = [
        [KeyboardButton(text='–ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –∫—É–ª–∏–Ω–∞—Ä–∏–∏')]
    ]
    kbmenu = ReplyKeyboardMarkup(keyboard=kbm, resize_keyboard=True, one_time_keyboard=False)
    await message.answer('–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –º–æ–ª–æ–¥–µ—Ü! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º', reply_markup=kbmenu)


@dp.message(Command('start'))
async def process_start_command(message: types.Message):
    user_id = message.from_user.id
    reply_keyboard = [
        [KeyboardButton(text='–î–∞'), KeyboardButton(text='–ù–µ—Ç')]
    ]
    kblogreg = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await message.reply('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫–∫–∞—É–Ω—Ç?', reply_markup=kblogreg)
    if message.text == '–î–∞':
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:')
        db_user_name = message.text
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
        db_user_password = message.text
        try:
            user = db_recepts_session.create_session().query(users_table_recepts.User()).filter(
                users_table_recepts.User.name == db_user_name).first()
            if (db_user_name) not in db_recepts_session.create_session().query(users_table_recepts.User.name).all():
                await message.reply('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            elif not db_recepts_session.create_session().query(users_table_recepts.User).filter(
                    users_table_recepts.User.name == db_user_name).first().check_password(db_user_password):
                await message.reply('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–≤–µ—Ä–Ω—ã')
            elif db_recepts_session.create_session().query(users_table_recepts.User).filter(
                    users_table_recepts.User.name == db_user_name).first().check_password(db_user_password):
                user = db_recepts_session.create_session().query(users_table_recepts.User).filter(
                    users_table_recepts.User.name == db_user_name).first()
                authorized.logined()
                await message.reply('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞')
        except Exception:
            await message.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

    elif message.text == '–ù–µ—Ç':
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:')
        db_user_name = message.text
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
        db_user_password = message.text
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É:')
        db_user_email = message.text

        user = users_table_recepts.User()
        user.name = db_user_name
        user.email = db_user_email
        user.set_password(db_user_password)
        db_sess = db_recepts_session.create_session()
        db_sess.add(user)
        db_sess.commit()
        authorized.logined()
        await message.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å')

    if not await check_subscription(user_id):
        await message.answer(
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=get_subscription_keyboard()
        )
        return

    await process_menu_command(message)


async def start_bot(message: types.Message):
    if message.from_user.username:
        user_name = message.from_user.username
    elif message.from_user.first_name:
        user_name = message.from_user.first_name
    else:
        user_name = "–¥—Ä—É–≥"

    reply_keyboard = [
        [KeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'), KeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç')],
        [KeyboardButton(text='–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã'), KeyboardButton(text='–†–µ–π—Ç–∏–Ω–≥')]
    ]
    kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n–≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É–¥–æ–±–Ω—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ —Å–∞–π—Ç—É {site}, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –µ–¥—ã –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —á—É–∂–∏–µ.",
        reply_markup=kb)


@dp.message(Command('profile'))
async def process_profile_command(message: types.Message):
    await message.reply("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@dp.message(Command('publish'))
async def process_publish_command(message: types.Message, db_user_name):
    if authorized.check():
        count = len(db_recepts_session.create_session().query(recept_table.Recepts.id).all()) + 1
        # —Å–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –∏ —Ñ–æ—Ç–æ, –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–≥–∞–º–∏ –≤–∏–¥–∞ –±–ª—é–¥–∞
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: —Ñ–æ—Ç–æ
        recept = recept_table.Recepts()
        reply_keyboard_tags = [
            [KeyboardButton(text='–°—É–ø'), KeyboardButton(text='–î–µ—Å–µ—Ä—Ç')],
            [KeyboardButton(text='–ß–∞–π'), KeyboardButton(text='–ì–∞—Ä–Ω–∏—Ä')]
        ]
        kbtags = ReplyKeyboardMarkup(keyboard=reply_keyboard_tags, resize_keyboard=True, one_time_keyboard=False)
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:')
        recept.title = message.text
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:')
        recept.discription = message.text
        await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–µ—Ü–µ–ø—Ç–∞:')
        image = message.text
        recept.way_to_image = f"/static/img/hero_file{count}.png"
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞:', reply_markup=kbtags)
        recept.category_tags = message.text
        while message.text != '–°—É–ø' or message.text != '–î–µ—Å–µ—Ä—Ç' or message.text != '–ß–∞–π' or message.text != '–ì–∞—Ä–Ω–∏—Ä':
            await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:', reply_markup=kbtags)
            recept.category_tags = message.text
        await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:')
        text = message.text
        recept.user_id = db_recepts_session.create_session().query(users_table_recepts.User.id).filter(
            users_table_recepts.User.name == db_user_name).first()[0]
        with open(f'static/text_files/text_recept_{count}', mode='w') as f:
            f.write('\n'.join(text.split('\r\n')))
            recept.content = f'static/text_files/text_recept_{count}'

            db_sess = db_recepts_session.create_session()
            db_sess.add(recept)
            db_sess.commit()

        await message.reply("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")

    @dp.message(Command('recipes'))
    async def process_recipes_command(message: types.Message):
        if len(db_recepts_session.create_session().query(recept_table.Recepts.id).all()) != 0:
            x = randint(1, len(db_recepts_session.create_session().query(recept_table.Recepts.id).all()))
            ans = db_recepts_session.create_session().query(recept_table.Recepts).filter(
                recept_table.Recepts.id == x).first()
            with open(f"{ans.content}", mode='r') as f:
                b = f.readlines()
                ans.content = ''.join(b)
            title = ans.title
            discription = ans.discription
            image = ans.way_to_image
            category_tags = ans.category_tags
            content = ans.content
        else:
            await message.reply("–†–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–≤—ã–º!")
        await message.reply("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–Ω—Ç—É —Ä–µ—Ü–µ–ø—Ç–æ–≤")

    @dp.message(Command('rating'))
    async def process_rating_command(message: types.Message):
        await message.reply("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 3 –ª—É—á—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    @dp.message()
    async def other_message(message: types.Message):
        if message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
            asyncio.create_task(process_profile_command(message))
        elif message.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç':
            asyncio.create_task(process_publish_command(message))
        elif message.text == '–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã':
            asyncio.create_task(process_recipes_command(message))
        elif message.text == '–†–µ–π—Ç–∏–Ω–≥':
            asyncio.create_task(process_rating_command(message))
        elif message.text == '–ü–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –∫—É–ª–∏–Ω–∞—Ä–∏–∏':
            asyncio.create_task(start_bot(message))
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–±–æ—Ç–∞–π —Å –±–æ—Ç–æ–º —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º')

    reply_keyboard = [
        [KeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'), KeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç')],
        [KeyboardButton(text='–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã'), KeyboardButton(text='–†–µ–π—Ç–∏–Ω–≥')]
    ]
    kb = ReplyKeyboardMarkup(keyboard=reply_keyboard, resize_keyboard=True, one_time_keyboard=False)

    async def main():
        await dp.start_polling(bot)

    if __name__ == '__main__':
        asyncio.run(main())
